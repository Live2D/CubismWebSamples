import { Live2DCubismFramework as cubismid } from "../../../../Framework/id/cubismid";
import { Live2DCubismFramework as cubismusermodel } from "../../../../Framework/model/cubismusermodel";
import { Live2DCubismFramework as icubismmodelsetting } from "../../../../Framework/icubismmodelsetting";
import { Live2DCubismFramework as acubismmotion } from "../../../../Framework/motion/acubismmotion";
import { Live2DCubismFramework as csmvector } from "../../../../Framework/type/csmvector";
import { Live2DCubismFramework as csmmap } from "../../../../Framework/type/csmmap";
import { Live2DCubismFramework as cubismmatrix44 } from "../../../../Framework/math/cubismmatrix44";
import { Live2DCubismFramework as cubismmotionqueuemanager } from "../../../../Framework/motion/cubismmotionqueuemanager";
import { Live2DCubismFramework as csmstring } from "../../../../Framework/type/csmstring";
import { Live2DCubismFramework as csmrect } from "../../../../Framework/type/csmrectf";
import csmRect = csmrect.csmRect;
import csmString = csmstring.csmString;
import CubismMotionQueueEntryHandle = cubismmotionqueuemanager.CubismMotionQueueEntryHandle;
import CubismMatrix44 = cubismmatrix44.CubismMatrix44;
import csmMap = csmmap.csmMap;
import csmVector = csmvector.csmVector;
import ACubismMotion = acubismmotion.ACubismMotion;
import CubismIdHandle = cubismid.CubismIdHandle;
import CubismUserModel = cubismusermodel.CubismUserModel;
import ICubismModelSetting = icubismmodelsetting.ICubismModelSetting;
import "whatwg-fetch";
export declare class LAppModel extends CubismUserModel {
    loadAssets(dir: string, fileName: string): void;
    private setupModel;
    private setupTextures;
    reloadRenderer(): void;
    update(): void;
    startMotion(group: string, no: number, priority: number): CubismMotionQueueEntryHandle;
    startRandomMotion(group: string, priority: number): CubismMotionQueueEntryHandle;
    setExpression(expressionId: string): void;
    setRandomExpression(): void;
    motionEventFired(eventValue: csmString): void;
    hitTest(hitArenaName: string, x: number, y: number): boolean;
    preLoadMotionGroup(group: string): void;
    releaseMotions(): void;
    releaseExpressions(): void;
    doDraw(): void;
    draw(matrix: CubismMatrix44): void;
    constructor();
    _modelSetting: ICubismModelSetting;
    _modelHomeDir: string;
    _userTimeSeconds: number;
    _eyeBlinkIds: csmVector<CubismIdHandle>;
    _lipSyncIds: csmVector<CubismIdHandle>;
    _motions: csmMap<string, ACubismMotion>;
    _expressions: csmMap<string, ACubismMotion>;
    _hitArea: csmVector<csmRect>;
    _userArea: csmVector<csmRect>;
    _idParamAngleX: CubismIdHandle;
    _idParamAngleY: CubismIdHandle;
    _idParamAngleZ: CubismIdHandle;
    _idParamEyeBallX: CubismIdHandle;
    _idParamEyeBallY: CubismIdHandle;
    _idParamBodyAngleX: CubismIdHandle;
    _state: number;
    _expressionCount: number;
    _textureCount: number;
    _motionCount: number;
    _allMotionCount: number;
}
