import { Live2DCubismFramework as cubismmotionmanager } from "../motion/cubismmotionmanager";
import { Live2DCubismFramework as cubismtargetpoint } from "../math/cubismtargetpoint";
import { Live2DCubismFramework as cubismmodelmatrix } from "../math/cubismmodelmatrix";
import { Live2DCubismFramework as cubismmoc } from "./cubismmoc";
import { Live2DCubismFramework as cubismmodel } from "./cubismmodel";
import { Live2DCubismFramework as acubismmotion } from "../motion/acubismmotion";
import { Live2DCubismFramework as cubismpose } from "../effect/cubismpose";
import { Live2DCubismFramework as cubismmodeluserdata } from "./cubismmodeluserdata";
import { Live2DCubismFramework as cubismphysics } from "../physics/cubismphysics";
import { Live2DCubismFramework as cubismid } from "../id/cubismid";
import { Live2DCubismFramework as csmstring } from "../type/csmstring";
import { Live2DCubismFramework as cubismmotionqueuemanager } from "../motion/cubismmotionqueuemanager";
import { Live2DCubismFramework as cubismbreath } from "../effect/cubismbreath";
import { Live2DCubismFramework as cubismeyeblink } from "../effect/cubismeyeblink";
import { Live2DCubismFramework as cubismrenderer_webgl } from "../rendering/cubismrenderer_WebGL";
import CubismRenderer_WebGL = cubismrenderer_webgl.CubismRenderer_WebGL;
import CubismEyeBlink = cubismeyeblink.CubismEyeBlink;
import CubismBreath = cubismbreath.CubismBreath;
import CubismMotionQueueManager = cubismmotionqueuemanager.CubismMotionQueueManager;
import csmString = csmstring.csmString;
import CubismIdHandle = cubismid.CubismIdHandle;
import CubismPhysics = cubismphysics.CubismPhysics;
import CubismModelUserData = cubismmodeluserdata.CubismModelUserData;
import CubismPose = cubismpose.CubismPose;
import ACubismMotion = acubismmotion.ACubismMotion;
import CubismModel = cubismmodel.CubismModel;
import CubismMoc = cubismmoc.CubismMoc;
import CubismModelMatrix = cubismmodelmatrix.CubismModelMatrix;
import CubismTargetPoint = cubismtargetpoint.CubismTargetPoint;
import CubismMotionManager = cubismmotionmanager.CubismMotionManager;
export declare namespace Live2DCubismFramework {
    class CubismUserModel {
        isInitialized(): boolean;
        setInitialized(v: boolean): void;
        isUpdating(): boolean;
        setUpdating(v: boolean): void;
        setDragging(x: number, y: number): void;
        setAcceleration(x: number, y: number, z: number): void;
        getModelMatrix(): CubismModelMatrix;
        setOpacity(a: number): void;
        getOpacity(): number;
        loadModel(buffer: ArrayBuffer): void;
        loadMotion(buffer: ArrayBuffer, size: number, name: string): ACubismMotion;
        loadExpression(buffer: ArrayBuffer, size: number, name: string): ACubismMotion;
        loadPose(buffer: ArrayBuffer, size: number): void;
        loadUserData(buffer: ArrayBuffer, size: number): void;
        loadPhysics(buffer: ArrayBuffer, size: number): void;
        isHit(drawableId: CubismIdHandle, pointX: number, pointY: number): boolean;
        getModel(): CubismModel;
        getRenderer(): CubismRenderer_WebGL;
        createRenderer(): void;
        deleteRenderer(): void;
        motionEventFired(eventValue: csmString): void;
        static cubismDefaultMotionEventCallback(caller: CubismMotionQueueManager, eventValue: csmString, customData: CubismUserModel): void;
        constructor();
        release(): void;
        protected _moc: CubismMoc;
        protected _model: CubismModel;
        protected _motionManager: CubismMotionManager;
        protected _expressionManager: CubismMotionManager;
        protected _eyeBlink: CubismEyeBlink;
        protected _breath: CubismBreath;
        protected _modelMatrix: CubismModelMatrix;
        protected _pose: CubismPose;
        protected _dragManager: CubismTargetPoint;
        protected _physics: CubismPhysics;
        protected _modelUserData: CubismModelUserData;
        protected _initialized: boolean;
        protected _updating: boolean;
        protected _opacity: number;
        protected _lipsync: boolean;
        protected _lastLipSyncValue: number;
        protected _dragX: number;
        protected _dragY: number;
        protected _accelerationX: number;
        protected _accelerationY: number;
        protected _accelerationZ: number;
        protected _debugMode: boolean;
        private _renderer;
    }
}
