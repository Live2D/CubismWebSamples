/// <reference path="../../Core/live2dcubismcore.d.ts" />
import { Live2DCubismFramework as cubismrenderer } from "../rendering/cubismrenderer";
import { Live2DCubismFramework as cubismid } from "../id/cubismid";
import CubismBlendMode = cubismrenderer.CubismBlendMode;
import CubismIdHandle = cubismid.CubismIdHandle;
export declare namespace Live2DCubismFramework {
    class CubismModel {
        update(): void;
        getCanvasWidth(): number;
        getCanvasHeight(): number;
        saveParameters(): void;
        getModel(): Live2DCubismCore.Model;
        getPartIndex(partId: CubismIdHandle): number;
        getPartCount(): number;
        setPartOpacityByIndex(partIndex: number, opacity: number): void;
        setPartOpacityById(partId: CubismIdHandle, opacity: number): void;
        getPartOpacityByIndex(partIndex: number): number;
        getPartOpacityById(partId: CubismIdHandle): number;
        getParameterIndex(parameterId: CubismIdHandle): number;
        getParameterCount(): number;
        getParameterMaximumValue(parameterIndex: number): number;
        getParameterMinimumValue(parameterIndex: number): number;
        getParameterDefaultValue(parameterIndex: number): number;
        getParameterValueByIndex(parameterIndex: number): number;
        getParameterValueById(parameterId: CubismIdHandle): number;
        setParameterValueByIndex(parameterIndex: number, value: number, weight?: number): void;
        setParameterValueById(parameterId: CubismIdHandle, value: number, weight?: number): void;
        addParameterValueByIndex(parameterIndex: number, value: number, weight?: number): void;
        addParameterValueById(parameterId: any, value: number, weight?: number): void;
        multiplyParameterValueById(parameterId: CubismIdHandle, value: number, weight?: number): void;
        multiplyParameterValueByIndex(parameterIndex: number, value: number, weight?: number): void;
        getDrawableIndex(drawableId: CubismIdHandle): number;
        getDrawableCount(): number;
        getDrawableId(drawableIndex: number): CubismIdHandle;
        getDrawableRenderOrders(): Int32Array;
        getDrawableTextureIndices(drawableIndex: number): number;
        getDrawableDynamicFlagVertexPositionsDidChange(drawableIndex: number): boolean;
        getDrawableVertexIndexCount(drawableIndex: number): number;
        getDrawableVertexCount(drawableIndex: number): number;
        getDrawableVertices(drawableIndex: number): Float32Array;
        getDrawableVertexIndices(drawableIndex: number): Uint16Array;
        getDrawableVertexPositions(drawableIndex: number): Float32Array;
        getDrawableVertexUvs(drawableIndex: number): Float32Array;
        getDrawableOpacity(drawableIndex: number): number;
        getDrawableCulling(drawableIndex: number): boolean;
        getDrawableBlendMode(drawableIndex: number): CubismBlendMode;
        getDrawableMasks(): Int32Array[];
        getDrawableMaskCounts(): Int32Array;
        isUsingMasking(): boolean;
        getDrawableDynamicFlagIsVisible(drawableIndex: number): boolean;
        getDrawableDynamicFlagVisibilityDidChange(drawableIndex: number): boolean;
        getDrawableDynamicFlagOpacityDidChange(drawableIndex: number): boolean;
        getDrawableDynamicFlagRenderOrderDidChange(drawableIndex: number): boolean;
        loadParameters(): void;
        initialize(): void;
        constructor(model: Live2DCubismCore.Model);
        release(): void;
        private _notExistPartOpacities;
        private _notExistPartId;
        private _notExistParameterValues;
        private _notExistParameterId;
        private _savedParameters;
        private _model;
        private _parameterValues;
        private _parameterMaximumValues;
        private _parameterMinimumValues;
        private _partOpacities;
        private _parameterIds;
        private _partIds;
        private _drawableIds;
    }
}
